ORG 100h

.data
base dw 0Ah
upperhold dw 0Ah
num1 dd ?
num2 dd ?
outputNumber dd ?
ghi dd ?
msg1 db 0Dh,0Ah, " Enter minuend number: $"
msg2 db 0Dh,0Ah, " Enter subtrahend number: $"
msg3 db 0Dh,0Ah, " result: $"

inputString db 20, ?, 18dup('$')

.code
main:
    mov ax, @data
    mov ds, ax

    mov dx, offset msg1
    mov ah, 9
    int 21h

    mov ah, 0Ah
    lea dx, inputString
    int 21h

    xor bx, bx
	mov bl, inputString[1]
	mov inputString[bx+2], 24h

    mov si, offset inputString+2
    mov ax, 0
    mov dx, 0
    mov base, ax
    mov upperhold, dx

convert_loop:
    mov bl,byte ptr [si]
    cmp bl, 24h
    je end_convert
    sub bl, '0'

    mov cx, 3
    x2:  
        shl ax, 1
        jc overflow1  
        shl dx, 1
        jmp next1:
    overflow1: 
        shl dx, 1
        inc dx
    next1: 
        loop x2

    mov cx, 2
    add1:
        add ax, base
        adc dx, upperhold
    loop add1  

    add ax, bx
    adc dx, 0
    mov base, ax
    mov upperhold, dx
    inc si
    jmp convert_loop
end_convert:

    mov num1, ax
    mov num1 + 2, dx

    mov dx, offset msg2
    mov ah, 9
    int 21h

    mov ah, 0Ah
    lea dx, inputString
    int 21h

    xor bx, bx
	mov bl, inputString[1]
	mov inputString[bx+2], 24h

    mov si, offset inputString+2
    mov ax, 0
    mov dx, 0
    mov base, ax
    mov upperhold, dx

convert_loop2:
    mov bl,byte ptr [si]
    cmp bl, 24h
    je end_convert2
    sub bl, '0'

    mov cx, 3
    x3:  
        shl ax, 1
        jc overflow2  
        shl dx, 1
        jmp next2:
    overflow2: 
        shl dx, 1
        inc dx
    next2: 
        loop x3

    mov cx, 2
    add2:
        add ax, base
        adc dx, upperhold
    loop add2  

    add ax, bx
    adc dx, 0
    mov base, ax
    mov upperhold, dx
    inc si
    jmp convert_loop2
end_convert2:

    mov num2, ax
    mov num2 + 2, dx

    call subtract2num

    mov dx, offset msg3
    mov ah, 9
    int 21h

    mov ax, word ptr ghi  
    mov dx, word ptr ghi + 2
    CALL PRINT32 

    MOV AH,4CH
    INT 21H

subtract2num:
    mov     ax, num1            
    mov     dx, num1 + 2        
    sub     ax, num2            
    sbb     dx, num2 + 2        
    mov     ghi, ax            
    mov     ghi + 2, dx        
    ret


PRINT32 PROC  
    mov     bx, 10
    push    bx                
    a1: 
        mov     cx,ax         
        mov     ax,dx         
        xor     dx,dx         
        div     bx            
        xchg    ax,cx         
        div     bx            
        push    dx             
        mov     dx,cx         
        or      cx,ax         
        jnz     a1            
    pop     dx                
    print: add     dl,"0"     
        mov     ah,02h         
        int     21h            
        pop     dx            
        cmp     dx,bx         
        jb      print         
    ret
PRINT32 endp
